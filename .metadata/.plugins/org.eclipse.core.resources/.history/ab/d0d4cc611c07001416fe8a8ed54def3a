package com.mx262cal726.BladeRunner.objects;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.util.LinkedList;

import com.mx262cal726.BladeRunner.Window.Animation;
import com.mx262cal726.BladeRunner.Window.Game;
import com.mx262cal726.BladeRunner.Window.Handler;
import com.mx262cal726.BladeRunner.framework.GameObject;
import com.mx262cal726.BladeRunner.framework.ObjectId;
import com.mx262cal726.BladeRunner.framework.Texture;

public class Player extends GameObject
{
    private float width=30, height=60;
    
    private float gravity= 0.5f;
    private final float MAX_SPEED = 10;
    private Handler handler;
    Texture tex = Game.getInstance();
    
    private Animation playerWalk;
    
	public Player(float x, float y, Handler handler, ObjectId id) 
	{
		super(x, y, id);
		this.handler= handler;
		
	  playerWalk = new Animation(5, tex.player[1],tex.player[2],tex.player[3], tex.player[4]);
	}

	public void tick(LinkedList<GameObject> object) 
	{
	  x += velX;
	  y += velY;
	  
	  if(falling || jumping)
	  {
		velY += gravity;
		if(velY > MAX_SPEED)
		{
	      velY = MAX_SPEED;
		}
	  }
	  Collision(object);
	  playerWalk.runAnimation();
	}
	private void Collision(LinkedList<GameObject> object)
	{
	  for(int i=0; i < handler.object.size(); i++)
	  {
		GameObject tempObject = handler.object.get(i);
		
		if(tempObject.getId() == ObjectId.Block)
		{
			if(getTopBounds().intersects(tempObject.getBounds()))
			{
			  y= tempObject.getY() + (height/2);
			  velY=0;
			}
			
			  if(getBounds().intersects(tempObject.getBounds()))
			  {
				y=tempObject.getY()-height;
				velY=0;
				falling = false;
				jumping = false;
			  }
			
			
		  if(getBounds().intersects(tempObject.getBounds()))
		  {
			y=tempObject.getY()-height;
			velY=0;
			falling = false;
			jumping = false;
		  }
		  else
		  {
			falling =true;
		  }
		  
		  //Right collision 
		  if(getRightBounds().intersects(tempObject.getBounds()))
		  {
		    x= tempObject.getX() - width;
		  }
		  
		  //Left collision
		  if(getLeftBounds().intersects(tempObject.getBounds()))
		  {
			x= tempObject.getX()+33;
		  }
		  
		}
	  }
	}
	public void render(Graphics g) 
	{
		g.setColor(Color.blue);
	      if(velX != 0)//dirt block
	      {
	    	playerWalk.drawAnimation(g, (int)x,(int)y,30,60);
	      }
	      else
	      {
	    	g.drawImage(tex.player[0], (int)x, (int)y,30,60, null);
	      }
	 // g.setColor(Color.BLUE);
	 // g.fillRect((int)x, (int)y, (int)width,(int)height);	
	  /**
	   * Code to see the collision bounds
	   */
	  /**
	  Graphics2D g2d = (Graphics2D)g;
	  g.setColor(Color.RED);
	  g2d.draw(getBounds());
	  g2d.draw(getLeftBounds());
	  g2d.draw(getRightBounds());
	  g2d.draw(getTopBounds());
	  */
	}

	public Rectangle getBounds() 
	{
      return new Rectangle((int) ((int)x+(width/2)-(width/2)/2), (int) ((int)y+height/2), (int)width/2,(int)height/2);
	}
	
	public Rectangle getRightBounds() 
	{
      return new Rectangle((int) ((int)x+width-5), (int)y+5, (int)5,(int)height-10);
	}	
	
	public Rectangle getLeftBounds() 
	{
      return new Rectangle((int)x, (int)y+5, (int)5,(int)height-10);
	}	
	
	public Rectangle getTopBounds() 
	{
	  return new Rectangle((int) ((int)x+(width/2)-(width/2)/2), (int)y, (int)width/2,(int)height/2);
	}
	
}
